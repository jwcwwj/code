#include <iostream>

using namespace std;

//空间配置器
//STL中的容器都是通过空间配置器申请和释放内存的，不是通过new和delete实现的（可以避免释放时的一些问题，还有异常和申请失败的一些问题）
//主要管理动态的空间，就是堆上的空间

//一级空间配置器:
//1.通过malloc申请空间，申请成功返回；
//2.申请失败，调用oom_malloc
//默认行为：抛异常
//非默认行为：通过设置相应的空间回收的措施，寻找可以利用的空间，死循环，直到申请到有效空间

//二级空间配置器：allocate(n)
//1.计算哈希位置
//2.判断     哈希桶    中是否有可以利用的内存块：
//	a.如果有：分一块内存给用户
//	b.如果没有：调用chunk_alloc从      内存池      中申请内存
//		chunk_alloc(n,nobj);	n：当前内存的大小	nobj代表需要分配的对象数量。
//		1.计算需要的总的自己数：total_bytes：n * nobj	需要的字节个数
//		2.计算内存池中剩余的字节数：bytes_left：end_free - start_free	提供的字节个数
//			a.bytes_left >= total_bytes：直接获取对应的字节数
//			b.bytes_size >= n：重新计算nobj、total_bytes
//			c.内存池中没有可以利用的内存或者剩余的内存小于n：
//				0.如果内存池中有剩余的内存：需要把剩余的内存挂到对应的哈希桶里面
//				1.调用malloc向     系统     申请空间：
//					a.申请成功：内存放入内存池，调用chunk_alloc
//					b.申请失败：从      更大的哈希桶     中找可以利用的内存
//						1.如果有：从哈希桶中取一块，放入内存池，调用chunk_alloc
//						2.如果没有：调用     一级空间配置器     申请内容
//							a.申请失败：抛异常
//							b.申请成功：内存放入内存池，调用chunk_alloc
//
//把申请到的第一块内存分给用户，剩余的内存块挂到对应的哈希桶

//c++STL中的容器默认使用的是二级空间配置器，因为二级空间配置器包含了一级空间配置器的逻辑
//二级空间配置器的释放：
//1.n > 128bytes：由一级空间配置器直接释放。 
//2.n <= 128bytes：空间回收，内存放入对应的哈希桶，由哈希桶进行管理。（进行回收，不会释放）
//
//
//

void test()
{
		 
}

int main()
{
	test();
	return 0;
}